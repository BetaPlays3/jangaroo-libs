package ext.direct {
/**
 *
 * <p>Provides for repetitive polling of the server at distinct <b class='link' title='#interval'>intervals</b>.
 * The initial request for data originates from the client, and then is responded to by the
 * server.</p>
 * 
 * <p>All configurations for the PollingProvider should be generated by the server-side
 * API portion of the ext.Direct stack.</p>
 *
 * <p>An instance of PollingProvider may be created directly via the new keyword or by simply
 * specifying <code>type = 'polling'</code>.  For example:</p>
 * <pre><code>
var pollA = new Ext.direct.PollingProvider({
    type&#58;'polling',
    url&#58; 'php/pollA.php',
});
ext.Direct.addProvider(pollA);
pollA.disconnect();

ext.Direct.addProvider(
    {
        type&#58;'polling',
        url&#58; 'php/pollB.php',
        id&#58; 'pollB-provider'
    }
);
var pollB = ext.Direct.getProvider('pollB-provider');
 * </code></pre>
 */
    public class PollingProvider extends JsonProvider {
/**
     * @cfg {Number} priority
     * Priority of the request (defaults to <code>3</code>). See <b class='link'>Ext.direct.Provider#priority</b>.
     */
    //public var priority;
    /**
     * @cfg {Number} interval
     * How often to poll the server-side in milliseconds (defaults to <code>3000</code> - every
     * 3 seconds).
     */
    public var interval : Number;

    protected native function JsonProvider(config) : void;

    override public native function isConnected() : void;
    /**
     * Connect to the server-side and begin the polling process. To handle each
     * response subscribe to the data event.
     */
    override public native function connect() : void;
    /**
     * Disconnect from the server-side and stop the polling process. The disconnect
     * event will be fired on a successful disconnect.
     */
    override public native function disconnect() : void;
    protected native function onData(opt, success, xhr) : void;
}}
